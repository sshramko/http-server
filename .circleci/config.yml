# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  kublr-api: kublr/kublr-api@dev:1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.9.4

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: npm test
      - run:
          name: Generate docker image name
          command: |
            echo 'export DEPLOY_DOCKER_IMAGE=$IMAGE_NAME:$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM' >> $BASH_ENV
            echo "Docker image $DEPLOY_DOCKER_IMAGE"
            source $BASH_ENV
      - kublr-api/auth:
          kublr-endpoint: KUBLR_ENDPOINT
          kublr-username: KUBLR_USERNAME
          kublr-password: KUBLR_PASSWORD
          insecure: true
      - kublr-api/call:
          call-method: POST
          call-path: "/api/spaces/$KUBLR_NAMESPACE/cluster"
          call-data-file: "./k8s/cluster-spec.json"
          result-file: "cluster-result.json"
          insecure: true
      - run:
          name: Check while cluster will have Running status
          command: |
            export CLUSTER_SPACE=$(cat cluster-result.json | jq -r '.metadata.space')
            export CLUSTER_NAME=$(cat cluster-result.json | jq -r '.metadata.name')
            export CLUSTER_ID=$(cat cluster-result.json | jq -r '.id')
            echo "Cluster id=$CLUSTER_ID space=$CLUSTER_SPACE"
            if [ "true" == "true" ]; then
              HEADERS=(-k --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'Authorization: bearer '${KUBLR_TOKEN})
            else
              HEADERS=(-s --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'Authorization: bearer '${KUBLR_TOKEN})
            fi

            echo "HEADERS=${HEADERS[@]}"

            echo "Create cluster with id $CLUSTER_ID name $KUBLR_CLUSTERNAME"

            REQ_URL="$KUBLR_ENDPOINT/api/spaces/$CLUSTER_SPACE/cluster/$CLUSTER_NAME/id/$CLUSTER_ID"

            START_TIME=$(date +%s)
            TIMEOUT=900
            echo $START_TIME
            while (( "$(date +%s) - $START_TIME" < ${TIMEOUT} ))
            do
                CLUSTER_STATE=$(curl -X GET "${HEADERS[@]}" $REQ_URL| jq -r '.status.state')
                if [ "$CLUSTER_STATE" == "Running" ]; then
                    echo "Cluster is running"
                    break;
                elif [ "$CLUSTER_STATE" == ""  -o  "$CLUSTER_STATE" == "Creating" ]; then
                    echo "Waiting creation, current status $CLUSTER_STATE"
                    sleep 10
                else
                    echo "Cluster state is $CLUSTER_STATE"
                    exit 1
                fi
            done
            echo "Cluster state is Ready"
      - run:
          name: Print env vars
          command: |
            echo "space=$CLUSTER_SPACE name=$CLUSTER_NAME id=$CLUSTER_ID"
      - kublr-api/get-cluster-config:
          kublr-space: $CLUSTER_SPACE
          kublr-cluster: $CLUSTER_NAME
          insecure: false
      - run:
          name: Print config
          command: |
            cat ./config


